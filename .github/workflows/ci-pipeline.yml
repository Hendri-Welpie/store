name: CI Pipeline for Dockerized Spring Boot

on:
  push:
    branches:
      - main   # Trigger the pipeline on push to the 'main' branch
  pull_request:
    branches:
      - main   # Trigger the pipeline on pull requests to the 'main' branch

jobs:
  build:
    runs-on: ubuntu-latest  # Use the latest Ubuntu environment for CI

    steps:
      # Step 1: Checkout the code from the repository
      - name: Checkout code
        uses: actions/checkout@v4

      # Step 2: Set up JDK 17 for building the project
      - name: Set up JDK 17
        uses: actions/setup-java@v2
        with:
          java-version: '17'
          distribution: 'adoptopenjdk'

      # Step 3: Cache Gradle dependencies for faster builds
      - name: Cache Gradle dependencies
        uses: actions/cache@v4
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      # Step 4: Build the project using Gradle
      - name: Build with Gradle
        run: ./gradlew build --no-daemon

      # Step 5: Dockerize the Spring Boot application
      - name: Build Docker image
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/my-spring-boot-app:${{ github.sha }} .

      # Step 6: Push Docker image to Docker Hub
      - name: Push Docker image to Docker Hub
        run: |
          echo ${{ secrets.DOCKER_PASSWORD }} | docker login -u ${{ secrets.DOCKER_USERNAME }} --password-stdin
          docker push ${{ secrets.DOCKER_USERNAME }}/my-spring-boot-app:${{ github.sha }}

      # Step 7: Clean up Docker images (optional)
      - name: Clean up Docker images
        run: docker system prune -f
